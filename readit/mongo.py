"""
Storage Layer for MongoDB
=========================

Instances need to implement the ``Storable`` protocol so that they may
safely be stored as Mongo documents.  This protocol implements the
transformation to and from Mongo documents.

.. py:class:: Storable

   I implement the transformation to and from Mongo DB documents which
   are little more than standard :py:class:`dict` instances.

   .. py:method:: to_persistence()

      :returns: a :py:class:`dict` of attributes to persist

      The dictionary is augmented with and ``_id`` member if the
      :py:attr:`object_id` attribute is not ``None``.

   .. py:classmethod:: from_persistence(values)

      :param values dict: dictionary of values to reconstitute
      :return: object instance that implements :py:class:`Storable`

   .. py:attribute:: object_id

      The unique identifier for this object instance in the persistence
      layer.  This property is conventionally assigned by the persistence
      provider.  In this case, it is the string representation of the
      :py:class:`~bson.objectid.ObjectId` instance assigned to this
      document.

"""
from __future__ import with_statement

import logging
import pymongo
import threading

from pymongo.objectid import ObjectId

import readit


class Storage(object):
    """I store object states as simple :py:class:`dict` instances.
    
    Instances are stored as dictionaries identified by a unique
    identifier.  The ID is generated by the :py:meth:`save` method
    and assigned to the ``object_id`` attribute of the object.  The
    instances themselves must implement the :py:class:`Storable` protocol.
    """

    _CONN = None
    _CONN_LOCK = threading.Lock()

    def __init__(self, storage_url=None, id_extractor=None, logger=None):
        self.storage_url = storage_url
        self.id_extractor = id_extractor
        self.logger = logger or logging.getLogger('readit.mongo')

    def save(self, storage_bin, storable):
        """Save *storable* into the data subset *storage_bin*.

        :param storage_bin: the namespace to store the object in.
        :param storable: the object to save.  This object may be modified
            before returning.

        The property set to store as a Mongo document is derived by calling
        :py:meth:`~Storable.to_persistence` method.  Then if *storable* has
        a property named ``object_id`` then it's value is used to construct a
        :py:class:`~bson.objectid.ObjectId` instance which is stored as the
        ``_id`` attribute.  Finally, the document is written to the storage
        engine.  If the ``object_id`` property was ``None`` initially, then
        it is updated with the ``_id`` attribute before returning.
        """
        persist = storable.to_persistence()
        if storable.object_id is not None:
            persist['_id'] = ObjectId(storable.object_id)
        conn = self.get_mongo_connection()
        conn[storage_bin].insert(persist)
        if storable.object_id is None:
            storable.object_id = str(persist['_id'])

    def retrieve_one(self, storage_bin, **arguments):
        """Answers the result of calling :py:meth:`~Storage.retrieve` with
        the specified parameters.  The result is required to be a single
        object.

        :raises: :py:class:`readit.MoreThanOneResultError` when more than one
                 result is returned by :py:meth:`~Storage.retrieve`"""
        result = self.retrieve(storage_bin, **arguments)
        if len(result) > 1:
            raise readit.MoreThanOneResultError()
        if len(result) == 0:
            return None
        return result[0]

    def retrieve(self, storage_bin, storage_id=None, cls=None, **constraint):
        """My answer is a list of objects that match the parameters.

        :param storage_bin: identifies the collection to retrieve from
        :param storage_id: identifies the Object ID to retrieve (*optional*)
        :param cls: a class that implements the :py:class:`Storable` protocol.
        :param constraint: the constraint to pass as the Mongo query.

        This method retrieves a set of objects from the Mongo collection
        named :py:data:`storage_bin` and optionally uses a factory to process
        the resulting documents.

        The :py:data:`cls` optional parameter identifies a class that
        implements the :py:class:`Storable` protocol. If this class is
        specified, then its :py:meth:`~Storable.from_persistence` class method
        is called for each retrieved document and the manufactured object is
        placed into the result set instead of the Mongo document.

        The remaining parameters form the search constraint.  If no
        constraint is supplied, then all of the documents in the collection
        are returned.
        """
        self.logger.debug('looking up %s in %s', constraint, storage_bin)
        conn = self.get_mongo_connection()
        if storage_id is not None:
            constraint['_id'] = ObjectId(storage_id)
        values = conn[storage_bin].find(constraint)
        if values and cls:
            def manufacture_object(data):
                self.logger.debug('found %s', data)
                object_id = data.pop('_id')
                instance = cls.from_persistence(data)
                instance.object_id = str(object_id)
                return instance
            values = (manufacture_object(data) for data in values)
        return list(values)

    def remove(self, storage_bin, storage_id, **constraint):
        constraint['_id'] = ObjectId(storage_id)
        conn = self.get_mongo_connection()
        collection = conn[storage_bin]
        collection.remove(constraint)

    def get_mongo_connection(self):
        if Storage._CONN is None:
            with Storage._CONN_LOCK:
                if Storage._CONN is None:
                    Storage._CONN = pymongo.Connection(host=self.storage_url)
        return Storage._CONN.readit

