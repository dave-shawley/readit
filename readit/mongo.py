"""
Storage Layer for MongoDB
=========================

Instances need to implement the ``Storable`` protocol so that they may
safely be stored as Mongo documents.  This protocol implements the
transformation to and from Mongo documents.

.. py:class:: Storable

   I implement the transformation to and from Mongo DB documents which
   are little more than standard :py:class:`dict` instances.

   .. py:method:: to_persistence()

      :returns: a :py:class:`dict` of attributes to persist

      The dictionary is augmented with and ``_id`` member if the
      :py:attr:`object_id` attribute is not ``None``.

   .. py:classmethod:: from_persistence(values)

      :param values dict: dictionary of values to reconstitute
      :return: object instance that implements :py:class:`Storable`

   .. py:attribute:: object_id

      The unique identifier for this object instance in the persistence
      layer.  This property is conventionally assigned by the persistence
      provider.  In this case, it is the string representation of the
      :py:class:`~bson.objectid.ObjectId` instance assigned to this
      document.

"""
from __future__ import with_statement

import pymongo
import threading

from pymongo.objectid import ObjectId

import readit


class Storage(object):
    """I store object states as simple :py:class:`dict` instances.
    
    Instances are stored as dictionaries identified by a unique
    identifier.  The ID is generated by the :py:meth:`save` method
    and assigned to the ``object_id`` attribute of the object.  The
    instances themselves must implement the :py:class:`Storable` protocol.
    """

    _CONN = None
    _CONN_LOCK = threading.Lock()

    def __init__(self, storage_url=None, id_extractor=None):
        self.storage_url = storage_url
        self.id_extractor = id_extractor

    def save(self, storage_bin, storable):
        """Save *storable* into the data subset *storage_bin*.
        :param storage_bin: the namespace to store the object in.
        :param storable: the object to save.  This object may be modified before returning.

        The property set to store as a Mongo document is derived by calling
        :py:meth:`to_persistence` method.  Then if *storable* has a property
        named ``object_id`` then it's value is used to construct a
        :py:class:`~bson.objectid.ObjectId` instance which is stored as the
        ``_id`` attribute.  Finally, the document is written to the storage
        engine.  If the ``object_id`` property was ``None`` initially, then it
        is updated with the ``_id`` attribute before returning.
        """
        persist = storable.to_persistence()
        if storable.object_id is not None:
            persist['_id'] = ObjectId(storable.object_id)
        conn = self.get_mongo_connection()
        conn[storage_bin].insert(persist)
        if storable.object_id is None:
            storable.object_id = str(persist['_id'])

    def retrieve_one(self, storage_bin, **arguments):
        result = self.retrieve(storage_bin, **arguments)
        if len(result) > 1:
            raise readit.MoreThanOneResultError()
        if len(result) == 0:
            return None
        return result[0]

    def retrieve(self, storage_bin, storage_id=None, clazz=None, **constraint):
        conn = self.get_mongo_connection()
        if storage_id is not None:
            constraint['_id'] = ObjectId(storage_id)
        values = conn[storage_bin].find(**constraint)
        if values and clazz:
            def manufacture_object(data):
                object_id = data.pop('_id')
                instance = clazz.from_persistence(data)
                instance.object_id = str(object_id)
                return instance
            values = (manufacture_object(data) for data in values)
        return list(values)

    def remove(self, storage_bin, storage_id, **constraint):
        constraint['_id'] = ObjectId(storage_id)
        conn = self.get_mongo_connection()
        collection = conn[storage_bin]
        collection.remove(constraint)

    def get_mongo_connection(self):
        if Storage._CONN is None:
            with Storage._CONN_LOCK:
                if Storage._CONN is None:
                    Storage._CONN = pymongo.Connection(host=self.storage_url)
        return Storage._CONN.readit

